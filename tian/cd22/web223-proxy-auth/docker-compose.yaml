version: "3.8"
services:
  opa101:
    build:
      context: .
      target: opa101
    command:
      - /bin/sh
      - -c
      - |
        cd /tmp
        cat <<EOOF > policy101.rego
        package x103.authz
        # mapping to uri /v1/data/x103/authz
        default allow = false
        allow {
            input.X_FORWARDED_URI == "/foo.html"
            input.method == "GET"
        }
        EOOF
        # The output of a Wasm module built this way contain the result of evaluating the entrypoint rule. 
        opa build -t wasm -e x103/authz/allow policy101.rego
        tar zxvf bundle.tar.gz
        ls -al /tmp
        busybox httpd -f -v -p 3000
    ports:
      - "8103:3000"
  deno101:
    build:
      context: .
      target: deno101
    entrypoint: sh
    command:
      - -c 
      - |
        env
    ports:
      - "8303:8080"
  box1:
    image: curlimages/curl:7.86.0
    command:
      - sh
      - -c
      - |
        sleep 5
        curl -sv http://deno101:8080
        curl -sv --header "x-forwarded-uri: /foo.html" http://deno101:8080
    ports:
      - "8301:3000"
  deno201:
    build:
      context: .
      target: deno101
    entrypoint: sh
    command:
      - -c 
      - |
        cat <<\EOOF > test.ts
        import chai from "https://esm.sh/chai@4.3.6";
        const resp1 = await fetch("http://deno101:8080", {
            method: "GET",
            headers: {"x-forwarded-uri": "/foo.html"}
          });
        chai.assert.equal(200, resp1.status);
        const resp2 = await fetch("http://deno101:8080");
        chai.assert.equal(403, resp2.status);
        EOOF
        sleep 10
        deno run --allow-net test.ts